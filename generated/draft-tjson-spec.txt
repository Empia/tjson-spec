



Network Working Group                                         T. Arcieri
Internet-Draft
Intended status: Informational                                 B. Laurie
Expires: April 5, 2017                                   October 2, 2016


   Tagged JavaScript Object Notation (TJSON) Data Interchange Format
                            draft-tjson-spec

Abstract

   Tagged JavaScript Object Notation (TJSON) is a data interchange
   format which is backwards compatible with the JavaScript Object
   Notation (JSON) [RFC7159] format.  It adds first-class type
   annotations ("tags") for supporting a richer set of types within JSON
   documents.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on April 5, 2017.

Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.



Arcieri & Laurie          Expires April 5, 2017                 [Page 1]

Internet-Draft        TJSON Data Interchange Format         October 2016


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Conventions Used in This Document . . . . . . . . . . . .   2
   2.  TJSON Grammar . . . . . . . . . . . . . . . . . . . . . . . .   3
     2.1.  String Grammar  . . . . . . . . . . . . . . . . . . . . .   3
     2.2.  Root Symbol . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Extended Types  . . . . . . . . . . . . . . . . . . . . . . .   4
     3.1.  Unicode Strings ("u:")  . . . . . . . . . . . . . . . . .   4
     3.2.  Binary Data . . . . . . . . . . . . . . . . . . . . . . .   4
       3.2.1.  base16 ("b16:") . . . . . . . . . . . . . . . . . . .   4
       3.2.2.  base64url ("b64:")  . . . . . . . . . . . . . . . . .   5
     3.3.  Integers ("i:") . . . . . . . . . . . . . . . . . . . . .   5
     3.4.  Timestamps ("t:") . . . . . . . . . . . . . . . . . . . .   5
   4.  Handling of JSON types  . . . . . . . . . . . . . . . . . . .   6
     4.1.  Objects . . . . . . . . . . . . . . . . . . . . . . . . .   6
     4.2.  Floating Points . . . . . . . . . . . . . . . . . . . . .   6
   5.  Normative References  . . . . . . . . . . . . . . . . . . . .   6
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   6

1.  Introduction

   Tagged JavaScript Object Notation (TJSON) is a set of backwards-
   compatible extensions to JavaScript Object Notation (JSON) [RFC7159]
   which enrich the set of types the format is able to express.

   TJSON can represent six primitive types (strings, binary data,
   integers, floating points, datetimes, and null) and two structured
   types (objects and arrays).

   To extend JSON with additional types in a backwards-compatible
   manner, TJSON adds a special mandatory "tag" to each JSON string
   which identifies the data type and, optionally, encoding format.  A
   tag consists of one or more alphanumeric characters, followed by the
   colon ":" character.  All strings in TJSON MUST have a valid tag
   prefix.

   TJSON is intended to simplify transcoding documents from other
   interchange formats which disambiguate strings from binary data, and
   also improve the ability to both canonicalize and authenticate JSON
   documents.

1.1.  Conventions Used in This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].




Arcieri & Laurie          Expires April 5, 2017                 [Page 2]

Internet-Draft        TJSON Data Interchange Format         October 2016


2.  TJSON Grammar

   TJSON relies on JSON as the basis of its grammar.  All TJSON
   documents are valid JSON documents (however the reverse is not true).
   The TJSON grammar can thus be seen as an extension of the JSON
   grammar, but one implemented in a backwards-compatible way.

2.1.  String Grammar

   The main grammatical addition of TJSON is a tag prefix on string
   literals.  Every string literal MUST have a tag prefix in TJSON.
   Strings literals in TJSON are described by the following grammar:

   <tagged-string> ::= quotation-mark tag *char quotation-mark

   <tag> ::= <alpha> *<alphanumeric> ':'

   <alpha> ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' |
               'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' |
               's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'

   <digit> ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'

   <alphanumeric> ::= <alpha> | <digit>

   The tagged-string pushdown replaces the string pushdown in JSON as
   described in [RFC7159].

   The quotation-mark and char pushdowns are described in section 7 of
   [RFC7159].

   TJSON places a maximum length of 4 bytes on tag, including the ':'
   character.

2.2.  Root Symbol

   The root grammatical symbol of all TJSON documents is constrained to
   the following nonterminals as described in [RFC7159]:

                       <root> ::= <object> | <array>

   Documents which do not contain an object or array as the toplevel
   element MUST be rejected by parsers.








Arcieri & Laurie          Expires April 5, 2017                 [Page 3]

Internet-Draft        TJSON Data Interchange Format         October 2016


3.  Extended Types

   The following section describes the extended types added to TJSON by
   embedding them in string literals as described in section 2.1 of this
   document.

3.1.  Unicode Strings ("u:")

   The representation of Unicode Strings is grammatically identical to
   JSON, except per section 2.1 of this document strings of this type
   carry a mandatory tag character, "u:" indicating a Unicode String.

   The following is an example of a Unicode String literal in TJSON:

                             "u:Hello, world!"

   Unlike JSON, all Unicode Strings in TJSON MUST be valid UTF-8
   [RFC3629].

3.2.  Binary Data

   TJSON provides first-class support for binary data stored in multiple
   different encodings within a tagged string.  Tags for binary data
   begin with the "b" character followed by an alphanumeric identifier
   for a specific format.

   The preferred encoding is base64url ("b64:"), which SHOULD be used by
   default unless another encoding is explicitly specified at
   serialization time.

   The base16 and base64url formats are mandatory to implement for all
   TJSON parsers.

3.2.1.  base16 ("b16:")

   A base16 literal starts with the "b16:" tag, followed by a valid
   base16 string.  The base16 format (a.k.a. hexadecimal) is described
   in [RFC4648].  All base16 strings in TJSON MUST be lower case.

   The following is an example of a base16 string literal in TJSON:

                     "b16:48656c6c6f2c20776f726c6421"

   This should decode to the equivalent of the ASCII string: "Hello,
   world!"






Arcieri & Laurie          Expires April 5, 2017                 [Page 4]

Internet-Draft        TJSON Data Interchange Format         October 2016


3.2.2.  base64url ("b64:")

   A base64url literal starts with the "b64:" tag, followed by a valid
   base64url string.  The base64url format is described in [RFC4648].
   All base64url strings in TJSON MUST NOT include any padding with the
   '=' character.  TJSON parsers MUST reject any documents containing
   padded base64url strings.

   The following is an example of a base64url string literal in TJSON:

                         "b64:SGVsbG8sIHdvcmxkIQ"

   This should decode to the equivalent of the ASCII string: "Hello,
   world!"

   Only the base64url format is supported.  The non-URL safe form of
   base64 is not supported and MUST be rejected by parsers.

3.3.  Integers ("i:")

   TJSON provides a standard syntax for representing integers as tagged
   strings, which allows representing more than the "[-(2**53)+1,
   (2**53)-1]" range of integers defined as interoperable in [RFC7159].

   An integer literal tagged string starts with the "i:" tag, followed
   by a valid JSON integer literal, with an optional minus character.

   Conforming TJSON parsers MUST be capable of supporting the full
   integer range "[-(2**63), (2**63)-1]", i.e. the range of a signed
   64-bit integer.

   Integers outside this range MUST be rejected.

3.4.  Timestamps ("t:")

   TJSON natively supports a timestamp type whose syntax is a subset of
   that provided by [RFC3339].  Specifically, TJSON timestamps MUST use
   only the upper-case UTC time zone identifier "Z".  No other time zone
   identifiers are allowed except "Z" and parsers MUST NOT allow them.

   The following is an example of a TJSON timestamp:

                         "t:2016-10-02T07:31:51Z"

   TJSON libraries SHOULD convert these timestamps to a native datetime
   type.





Arcieri & Laurie          Expires April 5, 2017                 [Page 5]

Internet-Draft        TJSON Data Interchange Format         October 2016


4.  Handling of JSON types

   Below are notes about how the processing of certain JSON types should
   be handled under TJSON.

4.1.  Objects

   TJSON constrains the allowable types for the names of object members
   to either Unicode Strings or Binary Data.

   All other types, such as integers, are expressly disallowed.

4.2.  Floating Points

   All numeric literals which are not represented as tagged strings MUST
   be treated as floating points under TJSON.  This is already the
   default behavior of many JSON libraries.

5.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC3339]  Klyne, G. and C. Newman, "Date and Time on the Internet:
              Timestamps", RFC 3339, DOI 10.17487/RFC3339, July 2002,
              <http://www.rfc-editor.org/info/rfc3339>.

   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO
              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November
              2003, <http://www.rfc-editor.org/info/rfc3629>.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <http://www.rfc-editor.org/info/rfc4648>.

   [RFC7159]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <http://www.rfc-editor.org/info/rfc7159>.

Authors' Addresses

   Tony Arcieri


   Ben Laurie




Arcieri & Laurie          Expires April 5, 2017                 [Page 6]
